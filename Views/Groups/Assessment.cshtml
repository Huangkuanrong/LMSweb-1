@model LMSweb.ViewModel.GroupViewModel
@{
    ViewBag.Title = "Assessment";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
}
<div class="cardArticle">
    <h4>@Model.CName</h4>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Missions", new { CID = Model.CID})">任務列表</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("Details", "Missions", new { mid = Model.MID})">任務內容</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Groups", new { mid = Model.MID, cid = Model.CID})">作業評分</a></li>
            <li class="breadcrumb-item" active" aria-current="page">@Model.GName</li>
        </ol>
    </nav>
</div>
<div class="article">
    @using (Html.BeginForm("Create", "Groups", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <h4><b>小組評價</b></h4>
        <hr />
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="mb-3">
                @Html.LabelFor(model => model.TeacherAssessment.GroupAchievementScore, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-5">
                    @Html.EditorFor(model => model.TeacherAssessment.GroupAchievementScore, new { htmlAttributes = new { @class = "form-control", @placeholder = "0分 ~ 100分" } })
                    @Html.ValidationMessageFor(model => model.TeacherAssessment.GroupAchievementScore, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.TeacherAssessment.TeacherA, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-5">
                    <div class="form-floating">
                        <textarea class="form-control" placeholder="Leave a comment here" id="TeacherAssessment_TeacherA" name="TeacherAssessment.TeacherA" style="height: 100px"></textarea>
                        <label for="floatingTextarea">請寫下對小組成果的評價...</label>
                    </div>
                </div>
            </div>
            @Html.HiddenFor(model => model.CID)
            @Html.HiddenFor(model => model.GID)
            @Html.HiddenFor(model => model.MID)

            小組成果 :
            <div class="accordion mb-3">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
                            流程圖
                        </button>
                    </h2>
                    <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingOne">
                        <div class="accordion-body">
                            <img src="~/UploadImages/@Model.DrawingImgPath" width="1000" />
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="panelsStayOpen-headingTwo">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
                            程式碼
                        </button>
                    </h2>
                    <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingTwo">
                        <div class="accordion-body">
                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                    </div>
                </div>
            </div>
            <div class="mb-3">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="確定送出" class="btn btn-primary" />
                    <input type="button" value="取消" class="btn btn-secondary" onclick="location.href='@Url.Action("Index", "Groups" , new {mid = Model.MID, cid = Model.CID })'" />
                </div>
            </div>
        </div>
    }
</div>
@section scripts
{
    <script>
        function CodingWindow() {
            const myWindow = window.open('@Url.Action("CheckCoding", "Groups", new { gid = Model.GID, cid = Model.CID, mid = Model.MID })',"",  "width=800,height=800");
        }
        function DrawingWindow() {
            const myWindow = window.open('@Url.Action("CheckDrawing", "Groups", new { gid = Model.GID, cid = Model.CID, mid = Model.MID })', "", "width=800,height=800");
        }
    </script>
    
}