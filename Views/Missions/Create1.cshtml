@model LMSweb.ViewModel.MissionViewModel

@{
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
}
<head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bs-stepper@1.7.0/dist/css/bs-stepper.min.css">
    <style>
        .__range input {
            outline: none;
            -webkit-appearance: none;
            background-color: #aaa;
            height: 3px;
            width: 100%;
            margin: 10px auto;
        }

            .__range input::-webkit-slider-thumb {
                -webkit-appearance: none;
                width: 20px;
                height: 20px;
                background-color: green;
                border-radius: 50%;
                cursor: -moz-grab;
                cursor: -webkit-grab;
            }

            .__range input::-moz-range-thumb {
                -webkit-appearance: none;
                width: 20px;
                height: 20px;
                background-color: green;
                border-radius: 50%;
                cursor: -moz-grab;
                cursor: -webkit-grab;
            }

            .__range input::-ms-thumb {
                -webkit-appearance: none;
                width: 20px;
                height: 20px;
                background-color: green;
                border-radius: 50%;
                cursor: -moz-grab;
                cursor: -webkit-grab;
            }

        .__range-step {
            position: relative;
        }

        .__range-max {
            float: right;
        }

        .__range-step input::-webkit-slider-thumb {
            background: transparent;
        }

        .__range-step input::-moz-range-thumb {
            background: transparent;
        }

        .__range-step input::-ms-thumb {
            background: transparent;
        }

        .__range-step datalist {
            position: relative;
            display: flex;
            justify-content: space-between;
            height: auto;
            bottom: 16px;
            /* disable text selection */
            -webkit-user-select: none; /* Safari */
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE10+/Edge */
            user-select: none; /* Standard */
            /* disable click events */
            pointer-events: none;
        }

            .__range-step datalist option {
                width: 10px;
                height: 10px;
                min-height: 10px;
                border-radius: 100px;
                /* hide text */
                white-space: nowrap;
                padding: 0;
                line-height: 40px;
            }


        .__range-step-popup output {
            position: absolute;
            background-color: green;
            width: 30px;
            height: 30px;
            text-align: center;
            color: white;
            border-radius: 100px;
            display: inline-block;
            font-size: 12px;
            bottom: 100%;
            left: 0;
            vertical-align: middle;
            line-height: 30px;
        }

        .__range-step-popup .__range-output-square {
            padding: 0 5px;
            min-width: 25px;
            width: auto !important;
            border-radius: 5px !important;
        }

        .__range-step-popup output:after {
            content: "";
            position: absolute;
            width: 0;
            height: 0;
            border-top: 10px solid green;
            border-left: 10px solid transparent;
            border-right: 10px solid transparent;
            top: 90%;
            left: 50%;
            margin-left: -10px;
            margin-top: -1px;
        }

        .__range-step-popup datalist {
            overflow: hidden;
        }

        .__range-step {
            margin: 0 40px;
        }

        .__range-step-popup {
            margin: 40px 40px;
        }
        }
    </style>
</head>
<div class="article">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h5>新增任務</h5>
            <hr />
            <div class="bs-stepper">
                <div class="bs-stepper-header" role="tablist">
                    <div class="step" data-target="#step1">
                        <button type="button" class="step-trigger" role="tab">
                            <span class="bs-stepper-circle">1</span>
                            <span class="bs-stepper-label">任務資訊</span>
                        </button>
                    </div>
                    <div class="line"></div>
                    <div class="step" data-target="#step2">
                        <button type="button" class="step-trigger" role="tab">
                            <span class="bs-stepper-circle">2</span>
                            <span class="bs-stepper-label">任務期限</span>
                        </button>
                    </div>
                    <div class="line"></div>
                    <div class="step" data-target="#step3">
                        <button type="button" class="step-trigger" role="tab">
                            <span class="bs-stepper-circle">3</span>
                            <span class="bs-stepper-label">新增知識點及提示</span>
                        </button>
                    </div>
                    <div class="line"></div>
                    <div class="step" data-target="#step4">
                        <button type="button" class="step-trigger" role="tab">
                            <span class="bs-stepper-circle">4</span>
                            <span class="bs-stepper-label">調整權重</span>
                        </button>
                    </div>
                    <div class="line"></div>
                    <div class="step" data-target="#step5">
                        <button type="button" class="step-trigger" role="tab">
                            <span class="bs-stepper-circle">5</span>
                            <span class="bs-stepper-label">完成!</span>
                        </button>
                    </div>
                </div>

                <div class="bs-stepper-content">
                    <div id="step1" class="content" role="tabpanel">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.mission.MID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.mission.MID, new { htmlAttributes = new { @class = "form-control", @Value = "M" + DateTime.Now.ToString("yyMMddHHmmss") } })
                                @Html.ValidationMessageFor(model => model.mission.MID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.mission.MName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.mission.MName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.mission.MName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.mission.MDetail, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.mission.MDetail, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.mission.MDetail, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <input type="button" class="btn btn-primary" value="下一步" onclick="stepper.next()" />
                    </div>
                    <div id="step2" class="content" role="tabpanel">
                        <div class="form-group">
                            @Html.LabelFor(model => model.mission.Start, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="input-group date" id="datetimepicker_start" data-target-input="nearest">
                                    @*<input type="text" class="form-control datetimepicker-input" data-target="#datetimepicker9" />*@
                                    @*@Html.EditorFor(model => model.mission.Start, new { htmlAttributes = new { @class = "form-control datetimepicker-input", data_target = "#datetimepicker9" } })*@
                                    @Html.EditorFor(model => model.mission.Start, new { htmlAttributes = new { @class = "form-control datetimepicker-input", data_target = "#datetimepicker_start" } })
                                    @Html.ValidationMessageFor(model => model.mission.Start, "", new { @class = "text-danger" })
                                    <div class="input-group-append" data-target="#datetimepicker_start" data-toggle="datetimepicker">
                                        <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.mission.End, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="input-group date" id="datetimepicker_end" data-target-input="nearest">
                                    @Html.EditorFor(model => model.mission.End, new { htmlAttributes = new { @class = "form-control datetimepicker-input", data_target = "#datetimepicker_end" } })
                                    @Html.ValidationMessageFor(model => model.mission.End, "", new { @class = "text-danger" })
                                    <div class="input-group-append" data-target="#datetimepicker_end" data-toggle="datetimepicker">
                                        <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>
                            <input type="button" class="btn btn-primary" value="上一步" onclick="stepper.previous()" />
                            <input type="button" class="btn btn-primary" value="下一步" onclick="stepper.next()" />
                        </div>
                    </div>
                    <div id="step3" class="content" role="tabpanel">
                        @*<div class="form-group">
                            @Html.LabelFor(model => model.mission.course.KnowledgePoints, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.ListBoxFor(model => model.SelectKnowledgeList, Model.KnowledgeList, htmlAttributes: new { @class = "form-control selectpicker", multiple = "", @data_live_search = "true", title = "請選擇知識點..." })
                            </div>
                        </div>*@

                        <div class="form-group">
                            @Html.LabelFor(model => model.mission.Tip, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.mission.Tip, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.mission.Tip, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @Html.HiddenFor(model => model.CID, htmlAttributes: new { @value = Model.CID })

                        <div>
                            <input type="button" class="btn btn-primary" value="上一步" onclick="stepper.previous()" />
                            <input type="button" class="btn btn-primary" value="下一步" onclick="stepper.next()" />
                        </div>
                    </div>
                    <div id="step4" class="content" role="tabpanel">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="card" style=" border-radius: 15px;">
                            <h5 class="card-header" style="font-weight:bold; background-color:LightGray;">互動合作權重</h5>
                            <div class="card-body">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.mission.discuss_k, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="__range __range-step">
                                            <input value="3" type="range" max="100" min="0" step="25" list="ticks1" id="myRange">
                                            <datalist id="ticks1">
                                                <option value="0">0%</option>
                                                <option value="25">25%</option>
                                                <option value="50">50%</option>
                                                <option value="75">75%</option>
                                                <option value="100">100%</option>
                                            </datalist>
                                            <p>Value: <span id="demo"></span></p>
                                            @Html.HiddenFor(model => model.mission.discuss_k, htmlAttributes: new { @value = '0' })
                                            @Html.ValidationMessageFor(model => model.mission.discuss_k, "", new { @class = "text-danger" })
                                            @Html.EditorFor(model => model.mission.discuss_k, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                        @*@Html.EditorFor(model => model.mission.discuss_k, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @*@Html.ValidationMessageFor(model => model.mission.discuss_k, "", new { @class = "text-danger" })*@
                                        @*<div class="editor-field" >
            <%: Html.EditorFor(model =>.mission.discuss_k) %>
        </div>*@

                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.mission.chart_k, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.mission.chart_k, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.mission.chart_k, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.mission.code_k, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.mission.code_k, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.mission.code_k, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.mission.AddMetacognition, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.mission.AddMetacognition, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.mission.AddMetacognition, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="card"  style=" border-radius: 15px;">
                            <h5 class="card-header" style="font-weight:bold; background-color:LightGray;">個人貢獻度權重</h5>
                            <div class="card-body">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.mission.eva_k, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.mission.eva_k, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.mission.eva_k, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.mission.per_k, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.mission.per_k, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.mission.per_k, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div>
                            <input type="button" class="btn btn-primary" value="上一步" onclick="stepper.previous()" />
                            <input type="button" class="btn btn-primary" value="下一步" onclick="simulateSubmit()" />
                        </div>
                    </div>
                    <div id="step5" class="content" role="tabpanel">
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">

                                <input type="submit" value="Create" class="btn btn-primary" />
                            </div>
                        </div>
                    </div>
                </div>


                @*<div class="input_fields_wrap">
                        <button class="add_field_button">Add More Fields</button>
                        <div><input type="text" name="mytext[]"></div>
                    </div>*@
            </div>
        </div>
    }
    <div>
        @Html.ActionLink("返回任務", "Index", new { cid = Model.CID })
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bs-stepper@1.7.0/dist/js/bs-stepper.min.js"></script>
<script type="text/javascript">
    var check_start_Exist = setInterval(function () {
        if ($('#datetimepicker_start').length) {
            console.log("Exists!");
            $('#datetimepicker_start').datetimepicker({
                icons: {
                    time: "fa fa-clock-o",
                    date: "fa fa-calendar",
                    up: "fa fa-arrow-up",
                    down: "fa fa-arrow-down"
                }
            });
            clearInterval(check_start_Exist);
        }
    }, 100); // check every 100ms

    var check_end_Exist = setInterval(function () {
        if ($('#datetimepicker_end').length) {
            console.log("Exists!");
            $('#datetimepicker_end').datetimepicker({
                icons: {
                    time: "fa fa-clock-o",
                    date: "fa fa-calendar",
                    up: "fa fa-arrow-up",
                    down: "fa fa-arrow-down"
                }
            });
            clearInterval(check_end_Exist);
        }
    }, 100); // check every 100ms

    var stepperElem = document.querySelector('.bs-stepper');
    var stepper = new Stepper(stepperElem);
    var done = false;
    var currStep = 1;
    history.pushState(currStep, '');
    //切換到步驟前觸發，呼叫e.preventDefault()可阻止切換
    stepperElem.addEventListener("show.bs-stepper", function (e) {
        if (done) { //若程序完成，不再切換
            e.preventDefault();
            return;
        }
    });
    //切換到步驟後觸發，e.detail.indexStep為目前步驟序號(從0開始)
    stepperElem.addEventListener("shown.bs-stepper", function (e) {
        var idx = e.detail.indexStep + 1;
        currStep = idx;
        //pushState()記下歷程以支援瀏覽器回上頁功能
        history.pushState(idx, '');
    })
    //瀏覽器上一頁下一頁觸發
    window.onpopstate = function (e) {
        if (e.state && e.state != currStep)
            stepper.to(e.state);
    };
    //模擬送出表單，註記已完成，不再允許切換步驟
    function simulateSubmit() {
        stepper.next();
        done = true;
    }


   
</script>
<script>
    document.querySelectorAll(".__range-step").forEach(function (ctrl) {
        var el = ctrl.querySelector('input');
        var output = ctrl.querySelector('output');
        var newPoint, newPlace, offset;
        el.oninput = function () {
            // colorize step options
            ctrl.querySelectorAll("option").forEach(function (opt) {
                if (opt.value <= el.valueAsNumber)
                    opt.style.backgroundColor = 'green';
                else
                    opt.style.backgroundColor = '#aaa';
            });
            // colorize before and after
            var valPercent = (el.valueAsNumber - parseInt(el.min)) / (parseInt(el.max) - parseInt(el.min));
            var style = 'background-image: -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(' +
                valPercent + ', green), color-stop(' +
                valPercent + ', #aaa));';
            el.style = style;

            // Popup
            if ((' ' + ctrl.className + ' ').indexOf(' ' + '__range-step-popup' + ' ') > -1) {
                var selectedOpt = ctrl.querySelector('option[value="' + el.value + '"]');
                output.innerText = selectedOpt.text;
                output.style.left = "50%";
                output.style.left = ((selectedOpt.offsetLeft + selectedOpt.offsetWidth / 2) - output.offsetWidth / 2) + 'px';
            }

            var valueOutput = document.getElementById("mission_discuss_k");
            valueOutput.value = new Number(this.value);
            console.log(typeof (valueOutput.value));
            console.log(valueOutput.value);
        };
        el.oninput();
    });

    window.onresize = function () {
        document.querySelectorAll(".__range").forEach(function (ctrl) {
            var el = ctrl.querySelector('input');
            el.oninput();
        });
    };
    //var slider = document.getElementById("myRange");
    var output = document.getElementById("demo");
    output.innerHTML = option.value;

    option.oninput = function () {
        output.innerHTML = this.value;
    }

</script>


