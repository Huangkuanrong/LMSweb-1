@model LMSweb.ViewModel.MissionCreateViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
}
<div class="article">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="mb-3">
                @Html.LabelFor(model => model.mission.MID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.mission.MID, new { htmlAttributes = new { @class = "form-control", @Value = "M" + DateTime.Now.ToString("yyMMddHHmmss")} })
                    @Html.ValidationMessageFor(model => model.mission.MID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.mission.Start, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="input-group date" id="datepicker_start" data-target-input="nearest">
                        @Html.EditorFor(model => model.mission.Start, new { htmlAttributes = new { @class = "form-control datepicker-input", data_target = "#datepicker_start" } })
                        @Html.ValidationMessageFor(model => model.mission.Start, "", new { @class = "text-danger" })
                        <div class="input-group-append" data-target="#datepicker_start" data-toggle="datepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.mission.End, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="input-group date" id="datepicker_end" data-target-input="nearest">
                        @Html.EditorFor(model => model.mission.End, new { htmlAttributes = new { @class = "form-control datepicker-input", data_target = "#datepicker_end" } })
                        @Html.ValidationMessageFor(model => model.mission.End, "", new { @class = "text-danger" })
                        <div class="input-group-append" data-target="#datepicker_end" data-toggle="datepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.mission.MName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.mission.MName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.mission.MName, "", new { @class = "text-danger" })
                </div>
            </div>
            @Html.LabelFor(model => model.mission.relatedKP, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="input-group mb-3">
                <div class="form-control " aria-describedby="button-addon2">
                    @Html.ListBoxFor(model => model.SelectKnowledgeList, Model.KnowledgeList, htmlAttributes: new { @class = "form-control selectpicker", multiple = "", @data_live_search = "true", @data_live_search_placeholder = "輸入知識點關鍵字", title = "請選擇知識點..." })
                </div>
                <div id="button-addon2">
                    <input type="button" value="管理知識點" onclick="myFunction()" class="btn btn-primary" />
                </div>
               
            </div>
            <div class="mb-3">
                @Html.LabelFor(model => model.mission.MDetail, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                  
                    @Html.TextAreaFor(model => model.mission.MDetail, 10, 120, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.mission.MDetail, "", new { @class = "text-danger" })
                </div>
            </div>

           

            <div class="mb-3">
                @Html.LabelFor(model => model.mission.discuss_k, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.mission.discuss_k, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.mission.discuss_k, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.mission.chart_k, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.mission.chart_k, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.mission.chart_k, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.mission.code_k, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.mission.code_k, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.mission.code_k, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.mission.eva_k, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.mission.eva_k, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.mission.eva_k, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.mission.per_k, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.mission.per_k, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.mission.per_k, "", new { @class = "text-danger" })
                </div>
            </div> 
            <div class="mb-3">
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.mission.AddMetacognition)
                        @Html.ValidationMessageFor(model => model.mission.AddMetacognition, "", new { @class = "text-danger" })加入後設認知
                    </div>
                </div>
            </div>
            <div class="mb-3">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </div>
            

        </div>
     }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
@section scripts
{
    <script>
        $(function () {
            $('#SelectKnowledgeList').on('shown.bs.select', function (e) {
                $('#SelectKnowledgeList').empty();
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetKnowledgeJSON", "Missions", new { cid = Model.CID})',
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        //var options = []
                        $.each(response['Data'], function (index, item) {
                            $('#SelectKnowledgeList').append('<option value="' + item.Value + '">' + item.Text + '</option>');
                        });
                        $('#SelectKnowledgeList').selectpicker('refresh');
                    },
                    error: function (thrownError) {
                        console.log(thrownError);
                    }
                });
            });
        })
        function myFunction() {
            console.log('@Url.Action("Details", "Course", new { CID = Model.CID})');
            const myWindow = window.open('@Url.Action("Details", "Course", new { CID = Model.CID})', "", "width=800,height=800");
            //myWindow.opener.document.getElementById("demo").innerHTML = "HELLO!";
        }
        function kpListReLoad() {
            var kps = $(this).next('.cities'); // get the associated cities dropdownlist
            cities.empty(); // clear existing options
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetKnowledgeJSON", "Missions")',
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    var options = []
                    $.each(response['Data'], function (index, item) {
                        options.append($('<option</option>').val(item.value).html(item.Text));
                    });
                },
                error: function (thrownError) {
                    console.log(thrownError);
                }
            });
        }

        $('#kpModal').on('show.bs.modal', function (event) {
            var modal = $(this)
            var text = ''
            $("input[name='all_student']").each(function () {
                if ($(this).prop("checked")) {
                    text += $(this).attr('id') + '<br/>';
                }
            });

        });
    </script>
    <script type="text/javascript">
        var check_start_Exist = setInterval(function () {
            if ($('#datepicker_start').length) {
                console.log("Exists!");
                $('#datepicker_start').datepicker({
                    icons: {
                        time: "fa fa-clock-o",
                        date: "fa fa-calendar",
                        up: "fa fa-arrow-up",
                        down: "fa fa-arrow-down"
                    }
                });
                clearInterval(check_start_Exist);
            }
        }, 100); // check every 100ms

        var check_end_Exist = setInterval(function () {
            if ($('#datepicker_end').length) {
                console.log("Exists!");
                $('#datepicker_end').datepicker({
                    icons: {
                        time: "fa fa-clock-o",
                        date: "fa fa-calendar",
                        up: "fa fa-arrow-up",
                        down: "fa fa-arrow-down"
                    }
                });
                clearInterval(check_end_Exist);
            }
        }, 100); // check every 100ms
    </script>
}